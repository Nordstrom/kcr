import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    // NB: plugin versions pinned in settings.gradle
    id("org.jetbrains.kotlin.jvm")
    id("org.jetbrains.kotlin.plugin.serialization")
    id("application")
    id("com.github.johnrengelman.shadow")
    id("com.adarshr.test-logger")
    id("com.diffplug.spotless")
    id("net.nemerosa.versioning")
}

group = "com.nordstrom.kafka.kcr"

application {
    mainClassName = "com.nordstrom.kafka.kcr.Kcr"
}

sourceSets {
    deploy
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK standard libraries
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlinxSerializationVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinxSerializationVersion")

    // Application dependencies
    implementation("info.picocli:picocli:$picocliVersion")
    implementation("org.slf4j:slf4j-api:$slf4jVersion")
    implementation("org.slf4j:slf4j-simple:$slf4jVersion")
    implementation("org.apache.kafka:kafka-clients:$kafkaVersion")
    implementation("com.github.ajalt:clikt:1.7.0")
//    implementation("com.github.ajalt.clikt:clikt:$cliKtVersion")
    implementation("io.micrometer:micrometer-registry-statsd:latest.release")
    implementation("io.micrometer:micrometer-registry-jmx:latest.release")
    implementation("commons-codec:commons-codec:$commonsCodecVersion")
    implementation platform("software.amazon.awssdk:bom:$awsSdkVersion")
    implementation("software.amazon.awssdk:s3")
    implementation("software.amazon.awssdk:netty-nio-client")

    // Test
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("io.kotest:kotest-assertions-core-jvm:$kotestVersion")
    testImplementation("io.kotest:kotest-runner-junit5-jvm:$kotestVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
    testRuntimeOnly("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        //NB: Need this for kotlinx-serialization
        freeCompilerArgs += "-Xuse-experimental=kotlin.Experimental"
    }
}

test {
    useJUnitPlatform()

    dependsOn("cleanTest")
    apply plugin: "com.adarshr.test-logger"

    testlogger {
        theme("mocha-parallel")
        showExceptions(true)
        showCauses(true)
        showStackTraces(true)
        showStandardStreams(true)
    }
}

spotless {
    java {
        googleJavaFormat("1.9")
        removeUnusedImports()
    }
}

version = "${versioning.info.lastTag}.${System.env.CI_PIPELINE_ID ?: 'dev'}"
versioning {
    noWarningOnDirty = true
}
processResources.dependsOn.add("generateVersionFile")
task generateVersionFile {
    doLast {
        new File(project.buildDir, 'resources/main').mkdirs()
        new File(project.buildDir, 'resources/main/version.properties')
                .withWriter('utf-8') { writer ->
                    writer.writeLine "version = ${project.version}"
                    writer.writeLine "git.branch = ${project.versioning.info.branch}"
                    writer.writeLine "git.commit = ${project.versioning.info.commit}"
                }
    }
}
