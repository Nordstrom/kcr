plugins {
    id("application")
    id("org.jetbrains.kotlin.jvm")
    id("org.jetbrains.kotlin.plugin.serialization")
    id("com.github.johnrengelman.shadow")
    id("com.adarshr.test-logger")
    id("com.diffplug.spotless")
}

ext {
    commonsCodecVersion = "1.15"
    kafkaVersion = "2.5.1"
    kotlinxCoroutinesVersion = "1.6.4"
    kotlinxSerializationVersion = "1.4.1"
    kotestVersion = "4.3.1"
    jupiterVersion = "5.7.0"
    slf4jVersion = "1.7.30"
}

group = "com.nordstrom.kafka.kcr"
mainClassName = "com.nordstrom.kafka.kcr.KcrKt"

sourceSets {
    deploy
}

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK standard libraries
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlinxSerializationVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinxSerializationVersion")

    // Application dependencies
    implementation("org.slf4j:slf4j-api:$slf4jVersion")
    implementation("org.slf4j:slf4j-simple:$slf4jVersion")
    implementation("org.apache.kafka:kafka-clients:$kafkaVersion")
    implementation("com.github.ajalt:clikt:1.7.0")
    implementation("io.micrometer:micrometer-registry-statsd:latest.release")
    implementation("io.micrometer:micrometer-registry-jmx:latest.release")
    implementation("commons-codec:commons-codec:$commonsCodecVersion")

    // Test
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("io.kotest:kotest-assertions-core-jvm:$kotestVersion")
    testImplementation("io.kotest:kotest-runner-junit5-jvm:$kotestVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
    testRuntimeOnly("org.jetbrains.kotlin:kotlin-reflect")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}

test {
    useJUnitPlatform()

    dependsOn("cleanTest")
    apply plugin: "com.adarshr.test-logger"

    testlogger {
        theme("mocha-parallel")
        showExceptions(true)
        showStandardStreams(true)
    }
}

spotless {
    java {
        googleJavaFormat("1.9")
        removeUnusedImports()
    }
}
